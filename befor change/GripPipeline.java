

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfInt;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;
import org.opencv.core.RotatedRect;


import edu.wpi.first.wpilibj.networktables.NetworkTable;

/**
 * GripPipeline class.
 *
 * <p>An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class GripPipeline {

	//Outputs
	private Mat hsvThresholdOutput = new Mat();
	private Mat cvErodeOutput = new Mat();
	private Mat cvDilateOutput = new Mat();
	private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<MatOfPoint>();

	//hsv
	/*private double[] hsvThresholdHue = new double[2];
	private double[] hsvThresholdSaturation = new double[2];
	private double[] hsvThresholdValue = new double[2];*/

	private Scalar hsvThresholdMinScalar = null;
	private Scalar hsvThresholdMaxScalar = null;

	private Properties properties;

	private NetworkTable VisionTable;

	private static final String FILE_PLACE = "/home/pi/Documents/vision/Java/Values";//fill place

	//find contours and filter contours variables  
	boolean findContoursExternalOnly;// = false;
	double filterContoursMinArea;// = 50;
	double filterContoursMinPerimeter;// = 0;
	double filterContoursMinWidth;// = 0;
	double filterContoursMaxWidth;// = 1000;
	double filterContoursMinHeight;// = 0;
	double filterContoursMaxHeight;// = 1000;
	double filterContoursSolidityMin;// = {0, 100};
	double filterContoursSolidityMax;
	double filterContoursMaxVertices;// = 1000000;
	double filterContoursMinVertices;// = 0;
	double filterContoursMinRatio;// = 0;
	double filterContoursMaxRatio;// = 15;
	double[] filterContoursSolidity = new double[2];

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */

	public GripPipeline(){
		this.VisionTable = NetworkTable.getTable("SmartDashboard");

		this.properties = new Properties();
		try {
			this.properties.load(new FileInputStream(FILE_PLACE));//fill place to use
			//this.setHSVThresholdScalar();
			//this.setFilterAndFindContorsValue();
			this.setValues();

		} catch (IOException e) {
			e.printStackTrace();
		}
		//this.setHSVThresholdValue();
	}	

	public void process(Mat source0) {
		// Step HSV_Threshold0:
		Mat hsvThresholdInput = source0;

		/*double[] hsvThresholdHue = {VisionTable.getNumber("hMin", 0), VisionTable.getNumber("hMax", 80)};
		double[] hsvThresholdSaturation = {VisionTable.getNumber("sMin", 0), VisionTable.getNumber("sMax", 100)};
		double[] hsvThresholdValue = {VisionTable.getNumber("vMin", 0), VisionTable.getNumber("vMax", 100)};*/

		/*double[] hsvThresholdHue = {0, 255};
		double[] hsvThresholdSaturation = {0, 255};
		double[] hsvThresholdValue = {0, 255};

		Threshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);*/

		hsvThreshold(hsvThresholdInput, hsvThresholdOutput);



		// Step CV_erode0:
		Mat cvErodeSrc = hsvThresholdOutput;
		Mat cvErodeKernel = new Mat();
		Point cvErodeAnchor = new Point(-1, -1);
		double cvErodeIterations = 1;
		int cvErodeBordertype = Core.BORDER_CONSTANT;
		Scalar cvErodeBordervalue = new Scalar(-1);
		cvErode(cvErodeSrc, cvErodeKernel, cvErodeAnchor, cvErodeIterations, cvErodeBordertype, cvErodeBordervalue, cvErodeOutput);


		// Step CV_dilate0:
		Mat cvDilateSrc = cvErodeOutput;
		Mat cvDilateKernel = new Mat();
		Point cvDilateAnchor = new Point(-1, -1);
		double cvDilateIterations = 1;
		int cvDilateBordertype = Core.BORDER_CONSTANT;
		Scalar cvDilateBordervalue = new Scalar(-1);
		cvDilate(cvDilateSrc, cvDilateKernel, cvDilateAnchor, cvDilateIterations, cvDilateBordertype, cvDilateBordervalue, cvDilateOutput);


		//if(!HSVValueShow){
		// Step Find_Contours0:

		Mat findContoursInput = cvDilateOutput;//hsvThresholdOutput;//cvDilateOutput;

		findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

		// Step Filter_Contours0:
		ArrayList<MatOfPoint> filterContoursContours = findContoursOutput;

		//filterContours(filterContoursContours, filterContoursMinArea, filterContoursMinPerimeter, filterContoursMinWidth, filterContoursMaxWidth, filterContoursMinHeight, filterContoursMaxHeight, filterContoursSolidity , filterContoursMaxVertices, filterContoursMinVertices, filterContoursMinRatio, filterContoursMaxRatio, filterContoursOutput);

		filterContours(findContoursOutput, filterContoursMinArea, filterContoursMinWidth, filterContoursMaxWidth, filterContoursMinHeight, filterContoursMaxHeight, filterContoursMinRatio, filterContoursMaxRatio, filterContoursOutput);
		
		//}
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_erode.
	 * @return Mat output from CV_erode.
	 */
	public Mat cvErodeOutput() {
		return cvErodeOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_dilate.
	 * @return Mat output from CV_dilate.
	 */
	public Mat cvDilateOutput() {
		return cvDilateOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Contours.
	 * @return ArrayList<MatOfPoint> output from Find_Contours.
	 */
	public ArrayList<MatOfPoint> findContoursOutput() {
		return findContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Filter_Contours.
	 * @return ArrayList<MatOfPoint> output from Filter_Contours.
	 */
	public ArrayList<MatOfPoint> filterContoursOutput() {
		return filterContoursOutput;
	}


	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input The image on which to perform the HSL threshold.
	 * @param hue The min and max hue
	 * @param sat The min and max saturation
	 * @param val The min and max value
	 * @param output The image in which to store the output.
	 */
	/*private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
	    Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
		Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
			new Scalar(hue[1], sat[1], val[1]), out);
	}

	private void Threshold(Mat input, double[] hue, double[] sat, double[] val, Mat out) {
		Core.inRange(input, new Scalar(hue[0], sat[0], val[0]),
					new Scalar(hue[1], sat[1], val[1]), out);
	}*/

	public /*private*/ void hsvThreshold(Mat input, Mat out) {
		Core.inRange(input, this.hsvThresholdMinScalar, this.hsvThresholdMaxScalar, out);
	}

	/**
	 * Expands area of lower value in an image.
	 * @param src the Image to erode.
	 * @param kernel the kernel for erosion.
	 * @param anchor the center of the kernel.
	 * @param iterations the number of times to perform the erosion.
	 * @param borderType pixel extrapolation method.
	 * @param borderValue value to be used for a constant border.
	 * @param dst Output Image.
	 */
	private void cvErode(Mat src, Mat kernel, Point anchor, double iterations,
			int borderType, Scalar borderValue, Mat dst) {
		if (kernel == null) {
			kernel = new Mat();
		}
		if (anchor == null) {
			anchor = new Point(-1,-1);
		}
		if (borderValue == null) {
			borderValue = new Scalar(-1);
		}
		Imgproc.erode(src, dst, kernel, anchor, (int)iterations, borderType, borderValue);
	}

	/**
	 * Expands area of higher value in an image.
	 * @param src the Image to dilate.
	 * @param kernel the kernel for dilation.
	 * @param anchor the center of the kernel.
	 * @param iterations the number of times to perform the dilation.
	 * @param borderType pixel extrapolation method.
	 * @param borderValue value to be used for a constant border.
	 * @param dst Output Image.
	 */
	private void cvDilate(Mat src, Mat kernel, Point anchor, double iterations,
			int borderType, Scalar borderValue, Mat dst) {
		if (kernel == null) {
			kernel = new Mat();
		}
		if (anchor == null) {
			anchor = new Point(-1,-1);
		}
		if (borderValue == null){
			borderValue = new Scalar(-1);
		}
		Imgproc.dilate(src, dst, kernel, anchor, (int)iterations, borderType, borderValue);
	}

	/**
	 * Sets the values of pixels in a binary image to their distance to the nearest black pixel.
	 * @param input The image on which to perform the Distance Transform.
	 * @param type The Transform.
	 * @param maskSize the size of the mask.
	 * @param output The image in which to store the output.
	 */
	private void findContours(Mat input, boolean externalOnly, List<MatOfPoint> contours) {
		Mat hierarchy = new Mat();
		contours.clear();
		int mode;
		if (externalOnly) {
			mode = Imgproc.RETR_EXTERNAL;
		}
		else {
			mode = Imgproc.RETR_LIST;
		}
		int method = Imgproc.CHAIN_APPROX_SIMPLE;
		Imgproc.findContours(input, contours, hierarchy, mode, method);
	}


	/**
	 * Filters out contours that do not meet certain criteria.
	 * @param inputContours is the input list of contours
	 * @param output is the the output list of contours
	 * @param minArea is the minimum area of a contour that will be kept
	 * @param minPerimeter is the minimum perimeter of a contour that will be kept
	 * @param minWidth minimum width of a contour
	 * @param maxWidth maximum width
	 * @param minHeight minimum height
	 * @param maxHeight maximimum height
	 * @param Solidity the minimum and maximum solidity of a contour
	 * @param minVertexCount minimum vertex Count of the contours
	 * @param maxVertexCount maximum vertex Count
	 * @param minRatio minimum ratio of width to height
	 * @param maxRatio maximum ratio of width to height
	 */
	private void filterContours(List<MatOfPoint> inputContours, double minArea,
			double minPerimeter, double minWidth, double maxWidth, double minHeight, double
			maxHeight, double[] solidity, double maxVertexCount, double minVertexCount, double
			minRatio, double maxRatio, List<MatOfPoint> output) {
		final MatOfInt hull = new MatOfInt();
		output.clear();
		//operation
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final Rect bb = Imgproc.boundingRect(contour);
			if (bb.width < minWidth || bb.width > maxWidth) continue;
			if (bb.height < minHeight || bb.height > maxHeight) continue;
			final double area = Imgproc.contourArea(contour);
			if (area < minArea) continue;
			if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter) continue;
			Imgproc.convexHull(contour, hull);
			MatOfPoint mopHull = new MatOfPoint();
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int)hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1]};
				mopHull.put(j, 0, point);
			}
			final double solid = 100 * area / Imgproc.contourArea(mopHull);
			if (solid < solidity[0] || solid > solidity[1]) continue;
			if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)	continue;
			final double ratio = bb.width / (double)bb.height;
			if (ratio < minRatio || ratio > maxRatio) continue;
			output.add(contour);
		}
	}

	private void filterContours(List<MatOfPoint> inputContours, double minArea,
			double minWidth, double maxWidth, double minHeight, double maxHeight, 
			double minRatio, double maxRatio, List<MatOfPoint> output) {

		output.clear();

		//operation
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);

			//if(contour.toArray().length < 5) continue;

			final Rect bb = Imgproc.boundingRect(contour);

			if (bb.width < minWidth || bb.width > maxWidth) continue;
			if (bb.height < minHeight || bb.height > maxHeight) continue;

			final double area = Imgproc.contourArea(contour);
			if (area < minArea) continue;

			final double ratio = bb.width / (double)bb.height;
			if (ratio < minRatio || ratio > maxRatio) continue;

			/*RotatedRect ellipse = Imgproc.fitEllipse(new MatOfPoint2f(contour.toArray()));
			if(ellipse.angle > 179 || (ellipse.angle < 135 && ellipse.angle > 45) || ellipse.angle < 1) continue;
			*/
			output.add(contour);
		}
	}

	/*public void setHValues(double hMin, double hMax) {
		this.hsvThresholdHue[0] = hMin;
		this.hsvThresholdHue[1] = hMax;
	}

	public void setSValues(double sMin, double sMax) {
		this.hsvThresholdSaturation[0] = sMin;
		this.hsvThresholdSaturation[1] = sMax;
	}

	public void setVValues(double vMin, double vMax) {
		this.hsvThresholdValue[0] = vMin;
		this.hsvThresholdValue[1] = vMax;
	}*/

	public void setHSVThresholdValueInFile() {

		/*this.hsvThresholdHue[0] = VisionTable.getNumber("hMin", 0);
		this.hsvThresholdSaturation[0] = VisionTable.getNumber("sMin", 0);
		this.hsvThresholdValue[0] = this.VisionTable.getNumber("vMin", 0);

		this.hsvThresholdHue[1] = VisionTable.getNumber("hMax", 80);
		this.hsvThresholdSaturation[1] = VisionTable.getNumber("sMax", 245);
		this.hsvThresholdValue[1] = VisionTable.getNumber("vMax", 255);*/

		try {
			this.properties.setProperty("hMin", String.valueOf(this.VisionTable.getNumber("hMin", 0)));//Save to file as hMin value
			this.properties.setProperty("sMin", String.valueOf(this.VisionTable.getNumber("sMin", 0)));//Save to file as sMin value
			this.properties.setProperty("vMin", String.valueOf(this.VisionTable.getNumber("vMin", 0)));//Save to file as vMin value

			this.properties.setProperty("hMax", String.valueOf(this.VisionTable.getNumber("hMax", 0)));//Save to file as hMax value
			this.properties.setProperty("sMax", String.valueOf(this.VisionTable.getNumber("sMax", 0)));//Save to file as sMax value
			this.properties.setProperty("vMax", String.valueOf(this.VisionTable.getNumber("vMax", 0)));//Save to file as vMax value
			this.properties.setProperty("vMax", String.valueOf(this.VisionTable.getNumber("vMax", 0)));//Save to file as vMax value

			this.properties.store(new FileOutputStream(FILE_PLACE), "HSV Values:");
		}catch (Exception e) {
			e.printStackTrace();
		}
	}

	/*
	public void setHSVThresholdScalar() {

		//this.hsvThresholdMinScalar = new Scalar(this.hsvThresholdHue[0], this.hsvThresholdSaturation[0], this.hsvThresholdValue[0]);
		//this.hsvThresholdMaxScalar = new Scalar(this.hsvThresholdHue[1], this.hsvThresholdSaturation[1], this.hsvThresholdValue[1]);

		this.hsvThresholdMinScalar = new Scalar(Double.valueOf(properties.getProperty("hMin", "0")),
				Double.valueOf(properties.getProperty("sMin", "0")), 
				Double.valueOf(properties.getProperty("vMin", "0")));

		this.hsvThresholdMaxScalar = new Scalar(Double.valueOf(properties.getProperty("hMax", "255")),
				Double.valueOf(properties.getProperty("sMax", "255")), 
				Double.valueOf(properties.getProperty("vMax", "255")));


		System.out.println("HSV Value:");//print the hsv values
		System.out.println("hMin: " + properties.getProperty("hMin", "0"));
		System.out.println("sMin: " + properties.getProperty("sMin", "0"));
		System.out.println("vMin: " + properties.getProperty("vMin", "0"));

		System.out.println("hMax: " + properties.getProperty("hMax", "0"));
		System.out.println("sMax: " + properties.getProperty("sMax", "0"));
		System.out.println("vMax: " + properties.getProperty("vMax", "0"));
		System.out.println("--------------------------------------------");
	}

	public void setFilterAndFindContorsValue() {
		try {
			this.findContoursExternalOnly = Boolean.valueOf(properties.getProperty("findContoursExternalOnly", "false"));
			this.filterContoursMinArea = Double.valueOf(properties.getProperty("filterContoursMinArea", "50"));
			this.filterContoursMinPerimeter = Double.valueOf(properties.getProperty("filterContoursMinPerimeter", "0"));
			this.filterContoursMinWidth = Double.valueOf(properties.getProperty("filterContoursMinWidth", "0"));
			this.filterContoursMaxWidth = Double.valueOf(properties.getProperty("filterContoursMaxWidth", "1000"));
			this.filterContoursMinHeight = Double.valueOf(properties.getProperty("filterContoursMinHeight", "0"));
			this.filterContoursMaxHeight = Double.valueOf(properties.getProperty("filterContoursMaxHeight", "1000"));
			this.filterContoursSolidityMin = Double.valueOf(properties.getProperty("filterContoursSolidityMin", "0"));
			this.filterContoursSolidityMax = Double.valueOf(properties.getProperty("filterContoursSolidityMax", "100"));
			this.filterContoursMaxVertices = Double.valueOf(properties.getProperty("filterContoursMaxVertices", "1000000"));
			this.filterContoursMinVertices = Double.valueOf(properties.getProperty("filterContoursMinVertices", "0"));
			this.filterContoursMinRatio = Double.valueOf(properties.getProperty("filterContoursMinRatio", "0"));
			this.filterContoursMaxRatio = Double.valueOf(properties.getProperty("filterContoursMaxRatio", "15"));
			this.filterContoursSolidity[0] = this.filterContoursSolidityMin;
			this.filterContoursSolidity[1] = this.filterContoursSolidityMax;
		}catch (Exception e) {
			e.printStackTrace();
		}
	}*/


	public void setValuesInFile() {
		try {

			//HSV Save Values In File
			this.properties.store(new FileOutputStream(FILE_PLACE), "HSV Values:");

			this.properties.setProperty("hMin", String.valueOf(this.VisionTable.getNumber("H Min", 0)));//Save to file as hMin value
			this.properties.setProperty("sMin", String.valueOf(this.VisionTable.getNumber("S Min", 0)));//Save to file as sMin value
			this.properties.setProperty("vMin", String.valueOf(this.VisionTable.getNumber("V Min", 0)));//Save to file as vMin value

			this.properties.setProperty("hMax", String.valueOf(this.VisionTable.getNumber("H Max", 0)));//Save to file as hMax value
			this.properties.setProperty("sMax", String.valueOf(this.VisionTable.getNumber("S Max", 0)));//Save to file as sMax value
			this.properties.setProperty("vMax", String.valueOf(this.VisionTable.getNumber("V Max", 0)));//Save to file as vMax value

			//Save Filter Values In File
			this.properties.store(new FileOutputStream(FILE_PLACE), "Filter Values:");

			this.properties.setProperty("filterContoursMinArea", String.valueOf(this.VisionTable.getNumber("filterContoursMinArea", 50)));//Save to file as filterContoursMinArea value
			this.properties.setProperty("filterContoursMinPerimeter", String.valueOf(this.VisionTable.getNumber("filterContoursMinPerimeter", 0)));//Save to file as filterContoursMinPerimeter value
			this.properties.setProperty("filterContoursMinWidth", String.valueOf(this.VisionTable.getNumber("filterContoursMinWidth", 0)));//Save to file as filterContoursMinWidth value			
			this.properties.setProperty("filterContoursMaxWidth", String.valueOf(this.VisionTable.getNumber("filterContoursMaxWidth", 1000)));//Save to file as filterContoursMaxWidth value			
			this.properties.setProperty("filterContoursMinHeight", String.valueOf(this.VisionTable.getNumber("filterContoursMinHeight", 0)));//Save to file as filterContoursMinHeight value			
			this.properties.setProperty("filterContoursMaxHeight", String.valueOf(this.VisionTable.getNumber("filterContoursMaxHeight", 1000)));//Save to file as filterContoursMaxHeight value
			this.properties.setProperty("filterContoursSolidityMin", String.valueOf(this.VisionTable.getNumber("filterContoursSolidityMin", 0)));//Save to file as filterContoursSolidityMin value
			this.properties.setProperty("filterContoursSolidityMax", String.valueOf(this.VisionTable.getNumber("filterContoursSolidityMax", 100)));//Save to file as filterContoursSolidityMax value
			this.properties.setProperty("filterContoursMaxVertices", String.valueOf(this.VisionTable.getNumber("filterContoursMaxVertices", 1000000)));//Save to file as filterContoursMaxVertices value
			this.properties.setProperty("filterContoursMinVertices", String.valueOf(this.VisionTable.getNumber("filterContoursMinVertices", 0)));//Save to file as filterContoursMinVertices value
			this.properties.setProperty("filterContoursMinRatio", String.valueOf(this.VisionTable.getNumber("filterContoursMinRatio", 0)));//Save to file as filterContoursMinRatio value
			this.properties.setProperty("filterContoursMaxRatio", String.valueOf(this.VisionTable.getNumber("filterContoursMaxRatio", 15)));//Save to file as filterContoursMaxRatio value

			//Save Find Contours Values In File
			this.properties.store(new FileOutputStream(FILE_PLACE), "Find Contours Values:");
			this.properties.setProperty("findContoursExternalOnly", String.valueOf(this.VisionTable.getBoolean("findContoursExternalOnly", false)));//Save to file as findContoursExternalOnly value

		}catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void setValues() {
		try {
			//HSV Values
			this.hsvThresholdMinScalar = new Scalar(Double.valueOf(properties.getProperty("hMin", "0")),
					Double.valueOf(properties.getProperty("sMin", "0")), 
					Double.valueOf(properties.getProperty("vMin", "0")));

			this.hsvThresholdMaxScalar = new Scalar(Double.valueOf(properties.getProperty("hMax", "255")),
					Double.valueOf(properties.getProperty("sMax", "255")), 
					Double.valueOf(properties.getProperty("vMax", "255")));


			//Filter Values
			this.findContoursExternalOnly = Boolean.valueOf(properties.getProperty("findContoursExternalOnly", "false"));
			this.filterContoursMinArea = Double.valueOf(properties.getProperty("filterContoursMinArea", "50"));
			this.filterContoursMinPerimeter = Double.valueOf(properties.getProperty("filterContoursMinPerimeter", "0"));
			this.filterContoursMinWidth = Double.valueOf(properties.getProperty("filterContoursMinWidth", "0"));
			this.filterContoursMaxWidth = Double.valueOf(properties.getProperty("filterContoursMaxWidth", "1000"));
			this.filterContoursMinHeight = Double.valueOf(properties.getProperty("filterContoursMinHeight", "0"));
			this.filterContoursMaxHeight = Double.valueOf(properties.getProperty("filterContoursMaxHeight", "1000"));
			this.filterContoursSolidityMin = Double.valueOf(properties.getProperty("filterContoursSolidityMin", "0"));
			this.filterContoursSolidityMax = Double.valueOf(properties.getProperty("filterContoursSolidityMax", "100"));
			this.filterContoursMaxVertices = Double.valueOf(properties.getProperty("filterContoursMaxVertices", "1000000"));
			this.filterContoursMinVertices = Double.valueOf(properties.getProperty("filterContoursMinVertices", "0"));
			this.filterContoursMinRatio = Double.valueOf(properties.getProperty("filterContoursMinRatio", "0"));
			this.filterContoursMaxRatio = Double.valueOf(properties.getProperty("filterContoursMaxRatio", "15"));
			this.filterContoursSolidity[0] = this.filterContoursSolidityMin;
			this.filterContoursSolidity[1] = this.filterContoursSolidityMax;
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
}

